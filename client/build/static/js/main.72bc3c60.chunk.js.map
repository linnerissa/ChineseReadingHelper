{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["toTranslateText","a","fetch","headers","Accept","response","json","body","status","Error","message","ToolTipButton","word","pronunciation","React","useState","selected","setSelected","translation","setTranslation","Tooltip","title","ToggleButton","size","value","onChange","callTranslationAPI","then","res","translatedText","basic","explains","length","replace","App","state","data","words","callBackendAPI","this","setState","original","detailedSegments","catch","err","console","log","className","map","item","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","document","getElementsByTagName","innerHTML","ReactDOM","render","StrictMode","getElementsByClassName"],"mappings":"4VAoDA,WAAkCA,GAAlC,iBAAAC,EAAA,sEACyBC,IAAM,mBAAqBF,EAAiB,CACjEG,QAAS,CACP,eAAgB,mBAChBC,OAAQ,sBAJd,cACQC,EADR,gBAOqBA,EAASC,OAP9B,UAOQC,EAPR,OAQ0B,MAApBF,EAASG,OARf,sBASUC,MAAMF,EAAKG,SATrB,gCAWSH,GAXT,4C,sBAkBA,SAASI,EAAT,GAAiD,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,cAAiB,EACdC,IAAMC,UAAS,GADD,mBACvCC,EADuC,KAC7BC,EAD6B,OAERH,IAAMC,SAAS,IAFP,mBAEvCG,EAFuC,KAE1BC,EAF0B,KAG9C,OAAIN,IAAkBD,GAA0B,KAAlBC,EACrBD,EAGP,cAACQ,EAAA,EAAD,CAASC,MAAOR,EAAhB,SACE,cAACS,EAAA,EAAD,CACEC,KAAK,QACLP,SAAUA,EACVE,YAAaA,EACbM,MAAOZ,EACPa,SAAU,WACY,KAAhBP,G,2CACFQ,CAAmBd,GAAMe,MAAK,SAACC,GAE3BA,GACAA,EAAIC,gBACJD,EAAIC,eAAeC,OACnBF,EAAIC,eAAeC,MAAMC,UACzBH,EAAIC,eAAeC,MAAMC,SAASC,OAAS,GAE3Cb,EAAsBS,EAAIC,eAAeC,MAAMC,SAAS,GA1BpDE,QAAQ,MAAO,QA6BzBhB,GAAaD,IAlBjB,SAqBGA,EAAWE,EAAcN,MAMnBsB,M,4MAlGbC,MAAQ,CACNC,KAAM,KACNC,MAAO,I,EAYTC,e,sBAAiB,8BAAArC,EAAA,sEACQC,IAAM,QAAS,CACpCC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,sBAJG,cACTC,EADS,gBAOIA,EAASC,OAPb,UAOTC,EAPS,OASS,MAApBF,EAASG,OATE,sBAUPC,MAAMF,EAAKG,SAVJ,gCAYRH,GAZQ,2C,uDATjB,WAAqB,IAAD,OAElBgC,KAAKD,iBACFX,MAAK,SAACC,GACL,EAAKY,SAAS,CAAEJ,KAAMR,EAAIa,SAAUJ,MAAOT,EAAIc,sBAEhDC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,Q,oBAkBhC,WACE,OACE,qBAAKG,UAAU,UAAf,SACGR,KAAKJ,MAAME,MAAMW,KAAI,SAACC,GAAD,OACpB,cAACtC,EAAD,CACEoC,UAAU,aACVnC,KAAMqC,EAAK,GACXpC,cAAeoC,EAAK,IACfA,EAAK,a,GAtCJC,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,4CCDd,8BAAAnD,EAAA,sEACyBC,MAAM,QAAS,CACpCC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,sBAJd,cACQC,EADR,gBAOqBA,EAASC,OAP9B,UAOQC,EAPR,OAS0B,MAApBF,EAASG,OATf,sBAUUC,MAAMF,EAAKG,SAVrB,gCAYSH,GAZT,4C,kEAeA+B,GACGX,MACC,SAACpB,GAAD,OACGoD,SAASC,qBAAqB,QAAQ,GAAGC,UAAYtD,EAAKkC,YAE9Dd,MAAK,SAACpB,GACLuD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFL,SAASM,uBAAuB,kBAAkB,OAOxDd,M","file":"static/js/main.72bc3c60.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport fetch from \"node-fetch\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    data: null,\r\n    words: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Call our fetch function below once the component mounts\r\n    this.callBackendAPI()\r\n      .then((res) => {\r\n        this.setState({ data: res.original, words: res.detailedSegments });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n  // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\r\n  callBackendAPI = async () => {\r\n    const response = await fetch(\"/news\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    });\r\n    const body = await response.json();\r\n\r\n    if (response.status !== 200) {\r\n      throw Error(body.message);\r\n    }\r\n    return body;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"article\">\r\n        {this.state.words.map((item) => (\r\n          <ToolTipButton\r\n            className=\"wordbutton\"\r\n            word={item[0]}\r\n            pronunciation={item[1]}\r\n            key={item[2]}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nasync function callTranslationAPI(toTranslateText) {\r\n  const response = await fetch(\"/translate?text=\" + toTranslateText, {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  });\r\n  const body = await response.json();\r\n  if (response.status !== 200) {\r\n    throw Error(body.message);\r\n  }\r\n  return body;\r\n}\r\n\r\nfunction format(definition) {\r\n  return definition.replace(/\\W/g, \"\");\r\n}\r\n\r\nfunction ToolTipButton({ word, pronunciation }) {\r\n  const [selected, setSelected] = React.useState(false);\r\n  const [translation, setTranslation] = React.useState(\"\");\r\n  if (pronunciation === word || pronunciation === \"\") {\r\n    return word;\r\n  }\r\n  return (\r\n    <Tooltip title={pronunciation}>\r\n      <ToggleButton\r\n        size=\"small\"\r\n        selected={selected}\r\n        translation={translation}\r\n        value={word}\r\n        onChange={() => {\r\n          if (translation === \"\") {\r\n            callTranslationAPI(word).then((res) => {\r\n              if (\r\n                res &&\r\n                res.translatedText &&\r\n                res.translatedText.basic &&\r\n                res.translatedText.basic.explains &&\r\n                res.translatedText.basic.explains.length > 0\r\n              )\r\n                setTranslation(format(res.translatedText.basic.explains[0]));\r\n            });\r\n          }\r\n          setSelected(!selected);\r\n        }}\r\n      >\r\n        {selected ? translation : word}\r\n      </ToggleButton>\r\n    </Tooltip>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nasync function callBackendAPI() {\r\n  const response = await fetch(\"/news\", {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  });\r\n  const body = await response.json();\r\n\r\n  if (response.status !== 200) {\r\n    throw Error(body.message);\r\n  }\r\n  return body;\r\n}\r\n\r\ncallBackendAPI()\r\n  .then(\r\n    (body) =>\r\n      (document.getElementsByTagName(\"html\")[0].innerHTML = body.original)\r\n  )\r\n  .then((body) => {\r\n    ReactDOM.render(\r\n      <React.StrictMode>\r\n        <App />\r\n      </React.StrictMode>,\r\n      document.getElementsByClassName(\"main-left left\")[0]\r\n    );\r\n  });\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}