{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["toTranslateText","a","fetch","response","json","body","status","Error","message","ToolTipButton","onSelected","word","pronunciation","definition","React","useState","selected","setSelected","translation","setTranslation","Tooltip","title","ToggleButton","size","onChange","callTranslationAPI","then","res","App","state","data","words","callBackendAPI","this","console","log","setState","original","detailedSegments","replaceMainBody","catch","err","class","map","item","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","document","getElementsByTagName","innerHTML","getElementsByClassName","ReactDOM","render","StrictMode"],"mappings":"4VAiDA,WAAkCA,GAAlC,iBAAAC,EAAA,sEAGyBC,IAAM,mBAAqBF,GAHpD,cAGQG,EAHR,gBAIqBA,EAASC,OAJ9B,UAIQC,EAJR,OAK0B,MAApBF,EAASG,OALf,sBAMUC,MAAMF,EAAKG,SANrB,gCAQSH,GART,4C,sBAWA,SAASI,EAAT,GAAwE,EAA/CC,WAAgD,IAApCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,cAA6B,KAAdC,WACxBC,IAAMC,UAAS,IADuB,mBAC/DC,EAD+D,KACrDC,EADqD,OAEhCH,IAAMC,SAAS,IAFiB,mBAE/DG,EAF+D,KAElDC,EAFkD,KAGtE,OAAIP,IAAkBD,GAA0B,KAAlBC,EACrBD,EAGP,cAACS,EAAA,EAAD,CAASC,MAAOT,EAAhB,SACE,cAACU,EAAA,EAAD,CACEC,KAAK,QACLP,SAAUA,EACVE,YAAaA,EACbM,SAAU,WACY,KAAhBN,G,2CACFO,CAAmBd,GAAMe,MAAK,SAACC,GAC7BR,EAAeQ,EAAG,mBAGtBV,GAAaD,IAVjB,SAcGA,EAAWE,EAAcP,MAMnBiB,M,4MAhFbC,MAAQ,CACNC,KAAM,KACNC,MAAO,I,EAcTC,e,sBAAiB,8BAAA/B,EAAA,sEACQC,IAAM,SADd,cACTC,EADS,gBAEIA,EAASC,OAFb,UAETC,EAFS,OAIS,MAApBF,EAASG,OAJE,sBAKPC,MAAMF,EAAKG,SALJ,gCAORH,GAPQ,2C,uDAXjB,WAAqB,IAAD,OAElB4B,KAAKD,iBACFN,MAAK,SAACC,GACLO,QAAQC,IAAIR,GACZ,EAAKS,SAAS,CAAEN,KAAMH,EAAIU,SAAUN,MAAOJ,EAAIW,mBAC/C,EAAKC,qBAENC,OAAM,SAACC,GAAD,OAASP,QAAQC,IAAIM,Q,oBAahC,WACE,OACE,qBAAKC,MAAM,UAAX,SACGT,KAAKJ,MAAME,MAAMY,KAAI,SAACC,GAAD,OACpB,cAACnC,EAAD,CACEiC,MAAM,aACN/B,KAAMiC,EAAK,GACXhC,cAAegC,EAAK,c,GAlCdC,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,4CCDd,8BAAA9C,EAAA,sEACyBC,MAAM,SAD/B,cACQC,EADR,gBAEqBA,EAASC,OAF9B,UAEQC,EAFR,OAI0B,MAApBF,EAASG,OAJf,sBAKUC,MAAMF,EAAKG,SALrB,gCAOSH,GAPT,4C,kEAUA2B,GACGN,MACC,SAACrB,GAAD,OACGiD,SAASC,qBAAqB,QAAQ,GAAGC,UAAYnD,EAAKgC,YAE9DX,MAAK,SAACrB,GACL6B,QAAQC,IAAImB,SAASG,uBAAuB,mBAC5CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFN,SAASG,uBAAuB,kBAAkB,OAOxDX,M","file":"static/js/main.8dde926a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport fetch from \"node-fetch\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    data: null,\r\n    words: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Call our fetch function below once the component mounts\r\n    this.callBackendAPI()\r\n      .then((res) => {\r\n        console.log(res);\r\n        this.setState({ data: res.original, words: res.detailedSegments });\r\n        this.replaceMainBody();\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n  // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\r\n  callBackendAPI = async () => {\r\n    const response = await fetch(\"/news\");\r\n    const body = await response.json();\r\n\r\n    if (response.status !== 200) {\r\n      throw Error(body.message);\r\n    }\r\n    return body;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"article\">\r\n        {this.state.words.map((item) => (\r\n          <ToolTipButton\r\n            class=\"wordbutton\"\r\n            word={item[0]}\r\n            pronunciation={item[1]}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nasync function callTranslationAPI(toTranslateText) {\r\n  // var url = new URL(\"/translate\");\r\n  // url.searchParams.append(\"text\", toTranslateText);\r\n  const response = await fetch(\"/translate?text=\" + toTranslateText);\r\n  const body = await response.json();\r\n  if (response.status !== 200) {\r\n    throw Error(body.message);\r\n  }\r\n  return body;\r\n}\r\n\r\nfunction ToolTipButton({ onSelected, word, pronunciation, definition }) {\r\n  const [selected, setSelected] = React.useState(false);\r\n  const [translation, setTranslation] = React.useState(\"\");\r\n  if (pronunciation === word || pronunciation === \"\") {\r\n    return word;\r\n  }\r\n  return (\r\n    <Tooltip title={pronunciation}>\r\n      <ToggleButton\r\n        size=\"small\"\r\n        selected={selected}\r\n        translation={translation}\r\n        onChange={() => {\r\n          if (translation === \"\") {\r\n            callTranslationAPI(word).then((res) => {\r\n              setTranslation(res[\"translatedText\"]);\r\n            });\r\n          }\r\n          setSelected(!selected);\r\n        }}\r\n      >\r\n        {/* selected should get definition of word from server */}\r\n        {selected ? translation : word}\r\n      </ToggleButton>\r\n    </Tooltip>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nasync function callBackendAPI() {\r\n  const response = await fetch(\"/news\");\r\n  const body = await response.json();\r\n\r\n  if (response.status !== 200) {\r\n    throw Error(body.message);\r\n  }\r\n  return body;\r\n}\r\n\r\ncallBackendAPI()\r\n  .then(\r\n    (body) =>\r\n      (document.getElementsByTagName(\"html\")[0].innerHTML = body.original)\r\n  )\r\n  .then((body) => {\r\n    console.log(document.getElementsByClassName(\"main-left left\"));\r\n    ReactDOM.render(\r\n      <React.StrictMode>\r\n        <App />\r\n      </React.StrictMode>,\r\n      document.getElementsByClassName(\"main-left left\")[0]\r\n    );\r\n  });\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}