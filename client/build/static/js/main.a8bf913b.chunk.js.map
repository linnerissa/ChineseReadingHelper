{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["toTranslateText","a","fetch","headers","Accept","response","json","body","status","Error","message","ToolTipButton","word","pronunciation","React","useState","selected","setSelected","translation","setTranslation","Tooltip","title","ToggleButton","size","value","onChange","callTranslationAPI","then","res","translatedText","basic","explains","length","replace","App","this","props","className","detailedSegments","map","item","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","callBackendAPI","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2VA0BA,WAAkCA,GAAlC,iBAAAC,EAAA,sEACyBC,IAAM,mBAAqBF,EAAiB,CACjEG,QAAS,CACP,eAAgB,mBAChBC,OAAQ,sBAJd,cACQC,EADR,gBAOqBA,EAASC,OAP9B,UAOQC,EAPR,OAQ0B,MAApBF,EAASG,OARf,sBASUC,MAAMF,EAAKG,SATrB,gCAWSH,GAXT,4C,sBAkBA,SAASI,EAAT,GAAiD,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,cAAiB,EACdC,IAAMC,UAAS,GADD,mBACvCC,EADuC,KAC7BC,EAD6B,OAERH,IAAMC,SAAS,IAFP,mBAEvCG,EAFuC,KAE1BC,EAF0B,KAG9C,OAAIN,IAAkBD,GAA0B,KAAlBC,EACrBD,EAGP,cAACQ,EAAA,EAAD,CAASC,MAAOR,EAAhB,SACE,cAACS,EAAA,EAAD,CACEC,KAAK,QACLP,SAAUA,EACVE,YAAaA,EACbM,MAAOZ,EACPa,SAAU,WACY,KAAhBP,G,2CACFQ,CAAmBd,GAAMe,MAAK,SAACC,GAE3BA,GACAA,EAAIC,gBACJD,EAAIC,eAAeC,OACnBF,EAAIC,eAAeC,MAAMC,UACzBH,EAAIC,eAAeC,MAAMC,SAASC,OAAS,GAE3Cb,EAAsBS,EAAIC,eAAeC,MAAMC,SAAS,GA1BpDE,QAAQ,MAAO,QA6BzBhB,GAAaD,IAlBjB,SAqBGA,EAAWE,EAAcN,MAMnBsB,M,4JAxEb,WACE,OACE,gCACE,6BAAKC,KAAKC,MAAM7B,KAAKc,QACrB,qBAAKgB,UAAU,UAAf,SACGF,KAAKC,MAAM7B,KAAK+B,iBAAiBC,KAAI,SAACC,GAAD,OACpC,cAAC7B,EAAD,CACE0B,UAAU,aACVzB,KAAM4B,EAAK,GACX3B,cAAe2B,EAAK,IACfA,EAAK,gB,GAXNC,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,4CCDd,8BAAA1C,EAAA,sEACyBC,MAAM,QAAS,CACpCC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,sBAJd,cACQC,EADR,gBAOqBA,EAASC,OAP9B,UAOQC,EAPR,OAS0B,MAApBF,EAASG,OATf,sBAUUC,MAAMF,EAAKG,SAVrB,gCAYSH,GAZT,4C,kEAeA2C,GAAiBvB,MAAK,SAACpB,GACrB4C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAK9C,KAAMA,MAEb+C,SAASC,eAAe,YAI5Bb,M","file":"static/js/main.a8bf913b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport fetch from \"node-fetch\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>{this.props.body.title}</h1>\r\n        <div className=\"article\">\r\n          {this.props.body.detailedSegments.map((item) => (\r\n            <ToolTipButton\r\n              className=\"wordbutton\"\r\n              word={item[0]}\r\n              pronunciation={item[1]}\r\n              key={item[2]}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nasync function callTranslationAPI(toTranslateText) {\r\n  const response = await fetch(\"/translate?text=\" + toTranslateText, {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  });\r\n  const body = await response.json();\r\n  if (response.status !== 200) {\r\n    throw Error(body.message);\r\n  }\r\n  return body;\r\n}\r\n\r\nfunction format(definition) {\r\n  return definition.replace(/\\W/g, \"\");\r\n}\r\n\r\nfunction ToolTipButton({ word, pronunciation }) {\r\n  const [selected, setSelected] = React.useState(false);\r\n  const [translation, setTranslation] = React.useState(\"\");\r\n  if (pronunciation === word || pronunciation === \"\") {\r\n    return word;\r\n  }\r\n  return (\r\n    <Tooltip title={pronunciation}>\r\n      <ToggleButton\r\n        size=\"small\"\r\n        selected={selected}\r\n        translation={translation}\r\n        value={word}\r\n        onChange={() => {\r\n          if (translation === \"\") {\r\n            callTranslationAPI(word).then((res) => {\r\n              if (\r\n                res &&\r\n                res.translatedText &&\r\n                res.translatedText.basic &&\r\n                res.translatedText.basic.explains &&\r\n                res.translatedText.basic.explains.length > 0\r\n              )\r\n                setTranslation(format(res.translatedText.basic.explains[0]));\r\n            });\r\n          }\r\n          setSelected(!selected);\r\n        }}\r\n      >\r\n        {selected ? translation : word}\r\n      </ToggleButton>\r\n    </Tooltip>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nasync function callBackendAPI() {\r\n  const response = await fetch(\"/news\", {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  });\r\n  const body = await response.json();\r\n\r\n  if (response.status !== 200) {\r\n    throw Error(body.message);\r\n  }\r\n  return body;\r\n}\r\n\r\ncallBackendAPI().then((body) => {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <App body={body} />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n  );\r\n});\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}